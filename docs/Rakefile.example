    # yes, the indentation is offset by 4. this is how it needs to be indented in the .md files
    #   we could probably fix this later with a template and some tooling to create the docs files
    # try me:  rake -T --rakefile docs/Rakefile.example
    # these two tasks are for the README.md file
    require 'rototiller'

    desc 'the old, bad way. This is for the README.md file.'
      task :demo_old do |t|
        echo_args = ENV['COMMAND_NAME'] || "my_sweet_command #{ENV['HOME']}"
        overriding_options = ENV['OPTIONS'].to_s
        args = [echo_args, *overriding_options.split(' '), '--switch'].compact
        sh("echo", *args)
      end

    desc 'the new, rototiller way. This is for the README.md file.'
      rototiller_task :demo_new do |t|
        # at the task level there is no implicit/automatic default for environment variables.  they must be specified if the environment variable is `optional`
        t.add_env({:name => 'FOO', :message => 'I am describing FOO, my task needs me, but has a default. this default will be set in the environment unless it exists', :default => 'FOO default'})
        t.add_env do |e|
          e.name    = 'HOME'
          e.message = 'I am describing HOME, my task needs me. all rototiller methods can take a hash or a block'
        end

        t.add_command do |c|
          c.name = 'echo my_sweet_command ${HOME}'
          c.add_env({:name => 'COMMAND_NAME', :message => 'use me to override this command name (`echo my_sweet_command ${HOME}; i default to the name of the command to which i was added`)'})
          c.add_switch({:name => '--switch'})
          # FYI, add_switch can also take a block and/or add_env
          # command blocks also have add_option, and add_arg, each of which can add environment variables which override themselves.
          # add_option actually has its own add_arg and each of those have add_env.  so meta
        end
      end

    # This example Rakefile should be kept in sync with the markdown docs files
    # This can be used by us and users as an example for all functionality
    # everything below here is for *reference.md
    desc 'parent task for dependent tasks. this one also uses two environment variables and multiple commands.'
      rototiller_task :parent_task do |task|
        # most method initializers take either a hash, or block syntax (see next task)
        # this first one would cause rototiller to error
        #task.add_env({:name     => 'NO_VALUE_NO_DEFAULT'})
        ENV['HAS_VALUE_NO_DEFAULT'] = 'from environment'
        task.add_env({:name     => 'HAS_VALUE_NO_DEFAULT'})
        #ENV['NO_VALUE_HAS_DEFAULT'] = 'from environment'
        # rototiller will set this in the environment so the task, programs, can use it
        task.add_env({:name     => 'NO_VALUE_HAS_DEFAULT',  :default => 'default value'})
        ENV['HAS_VALUE_HAS_DEFAULT'] = 'from environment'
        task.add_env({:name     => 'HAS_VALUE_HAS_DEFAULT', :default => 'default value'})
        task.add_command({:name => 'echo NO_VALUE_NO_DEFAULT:  "$NO_VALUE_NO_DEFAULT"'})
        task.add_command({:name => 'echo HAS_VALUE_NO_DEFAULT:  \"$HAS_VALUE_NO_DEFAULT\"'})
        task.add_command({:name => 'echo NO_VALUE_HAS_DEFAULT:  \"$NO_VALUE_HAS_DEFAULT\"'})
        task.add_command({:name => 'echo HAS_VALUE_HAS_DEFAULT: \"$HAS_VALUE_HAS_DEFAULT\"'})
      end

    desc 'override command-name with environment variable. This is for the reference file.'
    rototiller_task :child do |task|
      task.add_command({:name => 'nonesuch', :add_env => {:name => 'COMMAND_EXE1'}})
      # block syntax here. We give up some lines for more readability
      task.add_command do |cmd|
        cmd.name = 'meneither'
        cmd.add_env({:name => 'COMMAND_EXE2'})
      end
    end


    desc "add command-switch or option or argument with overriding environment variables." +
         "also give examples of how messaging works across the various portions of the API"
    rototiller_task :variable_switch do |task|
      task.add_command do |cmd|
        cmd.name = 'echo command_name'
        cmd.message = 'using `echo` to show how to override command portions using environment vars'
        cmd.add_switch do |s|
          s.name = '--switch'
          s.add_env({:name => 'CRASH_OVERRIDE', :message => 'this env overrides `switch`'})
        end
        cmd.add_argument do |a|
          a.name = 'arguments go last'
          a.add_env({:name => 'ARG_OVERRIDE', :message => 'this env overrides `arguments go last`'})
        end
        cmd.add_option do |o|
          o.name = '--option'
          o.add_env({:name => 'OPT_OVERRIDE', :message => 'this env overrides --option'})
          o.add_argument do |arg|
            arg.name = 'argument'
            arg.add_env({:name => 'OPT_ARG_OVERRIDE', :message => 'message at the env for option argument'})
          end
        end
      end
    end

    desc "a command option with an argument that requires input from a user"
    rototiller_task :option do |task|
      task.add_command do |cmd|
        cmd.name = 'echo command_name'
        cmd.add_option({:name => '--option', :add_argument => {:add_env => {:name => 'OPTION_ARG'}}})
      end
    end
